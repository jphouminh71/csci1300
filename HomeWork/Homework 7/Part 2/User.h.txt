#include <iostream>
#include <iomanip>
#include <fstream> 
#include <string>
#include <stdio.h>
#include <cctype>
#include <math.h>
#include <sstream>
using namespace std;
class User              // defining class
{
public:
    User(){
        username = ""; 
        
    }
    User(string given_name)                  // declaring a default constructor
    {
        username = given_name;                  // essentially setting all the private member values of the new object = to nothing
        for(int j = 0; j < 100; j++)
        {
            ratings[j] = 0;
        }
        numRatings = 100;
    }
    
    User(string name, int array[], int numberOfRatings)       // overloaded public constructor
    {
        username = name;                        // declaring name variable value
        for(int i = 0; i < numberOfRatings; i++)      // for loop that fills the ratings array with identical values of a passed array
        {
            ratings[i] = array[i];
        }
        numRatings = numberOfRatings;     // declaring numRatings private member
    }
    
    int getNumRatings();        // allows access for private members
    string getName();
    
    void setNumRatings(int);        // updates the values of the private members for the current object
    void setName(string);
    
    int getRatingAt(int index);                         // special function since you can return an entire array
    int setRatingAt(int position, int given_rating);
    




private:
    string username;                    // initialize private members
    int ratings[100];
    int numRatings;




};
int User::getNumRatings()           // everything down are the defniitions of the public member functions
{
    return numRatings;
}
void User::setNumRatings(int given_rating)
{
    numRatings = given_rating;
}
string User::getName()
{
    return username;
}
void User::setName(string given_username)
{
    username = given_username;
}
int User::getRatingAt(int index)
{
    if (index >= numRatings)
    {
        return -1000;
    }
    else{
        return ratings[index];
    }
}


int User::setRatingAt(int position, int given_rating)       
{
    if (position >= numRatings)
    {
        ratings[position] = ratings[position];
        return -1000;
    }
    
    if (given_rating == -5 || given_rating == -3 || given_rating == 0 || given_rating == 0 || given_rating == 3 || given_rating == 5)
    {
        ratings[position] = given_rating;
        cout << "Success!" << endl;
        return 0;
    }
    else{
        cout << "Invalid Input!" << endl;
        return -1;
    }
}